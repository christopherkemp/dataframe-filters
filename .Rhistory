select(!!id)
}
}
return(unique(data[,!!id]))
}
hist(iris$Petal.Length)
iris
is("setosa")
is(c("setosa"))
is(c("setosa", "list"))
is(clist("setosa", "list"))
is(list("setosa", "list"))
list("setosa", "list")
rowname(iris)
rownames(iris)
filter_1 <- studyOutcomesFilter(data = df, id = rownames(iris), field = Species, value = c("setosa"))
filter_2 <- studyOutcomesFilter(data = df, id = rownames(iris), field = Sepal.Length, value = c(6))
filter_2 <- studyOutcomesFilter(data = df, id = rownames(iris), field = Petal.Length, value = c(4,6))
filter_1 <- dataframeFilter(data = df, id = rownames(iris), field = Species, value = c("setosa"))
filter_2 <- dataframeFilter(data = df, id = rownames(iris), field = Sepal.Length, value = c(6))
filter_2 <- dataframeFilter(data = df, id = rownames(iris), field = Petal.Length, value = c(4,6))
if_false
paste(list("a", "b", "c"), collpase = "|")
str_detect(paste(list("a", "b", "c"), collpase = "|"), "a")
str_detect(paste(list("a", "b", "c"), collpase = "|"), "b")
dataframeFilter <- function(data, id, field, value){
field <- rlang::enexpr(field)
id <-  rlang::enexpr(id)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- initialDatafame %>% select(id)
}
else if (length(value)>0){
# Case: singleton character vector
if (typeof(value) == "character" & is_false(is.list(value))){
data <- initialDatafame %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(!!id)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (typeof(value) == "character" & is.list(value)) {
data <- StudyOutcomes %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(!!id)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- StudyOutcomes %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(!!id)
}
}
return(unique(data[,!!id]))
}
df <- iris
filter_1 <- dataframeFilter(data = df, id = rownames(iris), field = Species, value = c("setosa"))
dataframeFilter <- function(data, id, field, value){
field <- rlang::enexpr(field)
id <-  rlang::enexpr(id)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(id)
}
else if (length(value)>0){
# Case: singleton character vector
if (typeof(value) == "character" & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(!!id)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (typeof(value) == "character" & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(!!id)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(!!id)
}
}
return(unique(data[,!!id]))
}
filter_1 <- dataframeFilter(data = df, id = rownames(iris), field = Species, value = c("setosa"))
df <- iris %>%
mutate(id =
rownames(iris)
)
df
filter_1 <- dataframeFilter(data = df, id = id, field = Species, value = c("setosa"))
df$id
df <- iris %>%
mutate(row_id =
rownames(iris)
)
df
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
dataframeFilter <- function(data, id, field, value){
field <- rlang::enexpr(field)
id <-  rlang::enexpr(id)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(!!id)
}
else if (length(value)>0){
# Case: singleton character vector
if (typeof(value) == "character" & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(!!id)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (typeof(value) == "character" & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(!!id)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(!!id)
}
}
return(unique(data[,!!id]))
}
df <- iris %>%
mutate(row_id =
rownames(iris)
)
df
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
names(df)
dataframeFilter <- function(data, field, value){
field <- rlang::enexpr(field)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(row_id)
}
else if (length(value)>0){
# Case: character vector
if (typeof(value) == "character" & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(row_id)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (typeof(value) == "character" & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(row_id)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(row_id)
}
}
return(unique(data[, row_id]))
}
>=?
?>
? =
? ">="
identical("a", )
identical("a", "a")
identical(2-1, 3-2)
dataframeFilter <- function(data, field, value){
field <- rlang::enexpr(field)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(row_id)
}
else if (length(value)>0){
# Case: character vector
if (identical(typeof(value), "character") & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(row_id)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (identical(typeof(value), "character") & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(row_id)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(row_id)
}
}
return(unique(data[, row_id]))
}
#' @example
#' For use within an R script, but can be extended to other cases
#' Adapt for Shiny by wrapping `final_rows` in a reactive expression
#' Use iris dataset, creating column `id` from rownames
df <- iris %>%
mutate(row_id =
rownames(iris)
)
filter_1 <- dataframeFilter(data = df, field = Species, value = c("setosa"))
df
names(df)
df %>% select(row_id)
filter_1 <- dataframeFilter(data = df, field = Species, value = c("setosa"))
df %>% filter(tolower(Species) %in% c("setosa"))
df %>% filter(tolower(Species) %in% c("setosa")) %>% select(row_id)
dataframeFilter(data = df, field = Species, value = c("setosa"))
dataframeFilter <- function(data, field, value){
field <- rlang::enexpr(field)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(row_id)
}
else if (length(value)>0){
# Case: character vector
if (identical(typeof(value), "character") & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(row_id)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (identical(typeof(value), "character") & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(row_id)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(row_id)
}
}
return(unique(data[, "row_id"]))
}
dataframeFilter(data = df, field = Species, value = c("setosa"))
dataframeFilter(data = df, id = row_id, field = Sepal.Length, value = c(6))
dataframeFilter <- function(data, id, field, value){
field <- rlang::enexpr(field)
id <- rlang::enexpr(id)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(row_id)
}
else if (length(value)>0){
# Case: character vector
if (identical(typeof(value), "character") & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(!!id)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (identical(typeof(value), "character") & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(!!id)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(!!id)
}
}
return(unique(data[, !!id]))
}
dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
dataframeFilter <- function(data, id, field, value){
field <- rlang::enexpr(field)
id <- rlang::enexpr(id)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(row_id)
}
else if (length(value)>0){
# Case: character vector
if (identical(typeof(value), "character") & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(!!(id))
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (identical(typeof(value), "character") & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(!!(id))
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(!!(id))
}
}
return(unique(data[, !!(id)]))
}
#' @example
#' For use within an R script, but can be extended to other cases
#' Adapt for Shiny by wrapping `final_rows` in a reactive expression
#' Use iris dataset, creating column `id` from rownames
df <- iris %>%
mutate(row_id =
rownames(iris)
)
#' create three filters
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
dataframeFilter <- function(data, id, field, value){
field <- rlang::enexpr(field)
id <- rlang::enexpr(id)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select((!!id))
}
else if (length(value)>0){
# Case: character vector
if (identical(typeof(value), "character") & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select((!!id))
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (identical(typeof(value), "character") & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select((!!id))
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select((!!id))
}
}
return(unique(data[, (!!id)]))
}
df <- iris %>%
mutate(row_id =
rownames(iris)
)
#' create three filters
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
dataframeFilter <- function(data, id, field, value){
field <- rlang::enexpr(field)
id_q <- rlang::enexpr(id)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(!!id_q)
}
else if (length(value)>0){
# Case: character vector
if (identical(typeof(value), "character") & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(!!id_q)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (identical(typeof(value), "character") & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(!!id_q)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(!!id_q)
}
}
return(unique(data %>% select(!!id_q)))
}
df <- iris %>%
mutate(row_id =
rownames(iris)
)
#' create three filters
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
filter_1
filter_2 <- dataframeFilter(data = df, id = row_id, field = Sepal.Length, value = c(6))
filter_2
filter_2 <- dataframeFilter(data = df, id = row_id, field = Petal.Length, value = c(4,6))
filter_2
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
filter_2 <- dataframeFilter(data = df, id = row_id, field = Sepal.Length, value = c(6))
filter_2 <- dataframeFilter(data = df, id = row_id, field = Petal.Length, value = c(4,6))
#' compose filters
final_rows <- filter_1 %>%
intersect(filter_2) %>%
intersect(filter_3)
#' show resulting filtered dataframe
df %>% filter(id %in% final_rows)
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
filter_2 <- dataframeFilter(data = df, id = row_id, field = Sepal.Length, value = c(6))
filter_3 <- dataframeFilter(data = df, id = row_id, field = Petal.Length, value = c(4,6))
#' compose filters
final_rows <- filter_1 %>%
intersect(filter_2) %>%
intersect(filter_3)
#' show resulting filtered dataframe
df %>% filter(id %in% final_rows)
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
filter_2 <- dataframeFilter(data = df, id = row_id, field = Sepal.Length, value = c(6))
filter_3 <- dataframeFilter(data = df, id = row_id, field = Petal.Length, value = c(4,6))
filter_3
a <- 123
quote(a)
dataframeFilter <- function(data, id, field, value){
field <- rlang::enexpr(field)
id_q <- rlang::enexpr(id)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(!!id_q)
}
else if (length(value)>0){
# Case: character vector
if (identical(typeof(value), "character") & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(!!id_q)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (identical(typeof(value), "character") & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(!!id_q)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(!!id_q)
}
}
return(unique(data[, quote(id_q)]))
}
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
df %>% pull(row_id)
dataframeFilter <- function(data, id, field, value){
field <- rlang::enexpr(field)
id_q <- rlang::enexpr(id)
# check if any filters are applied, if not return original dataframe
if (is.null(value)) {
data <- data %>% select(!!id_q)
}
else if (length(value)>0){
# Case: character vector
if (identical(typeof(value), "character") & is_false(is.list(value))){
data <- data %>%
filter(tolower(!!field) %in% tolower(value)) %>%
select(!!id_q)
}
# Case: pattern match on list elements (useful for Shiny selectize inputs)
else if (identical(typeof(value), "character") & is.list(value)) {
data <- data %>%
filter(map_lgl(tolower(!!field), str_detect, pattern = tolower(paste(value, collapse="|")))) %>%
select(!!id_q)
}
# Case: single numeric value or range of numbers
else if (typeof(value) %in% c("double", "integer", "float")){
data <- data %>%
filter((!!field >= value[1]) | (!!field >= value[1] & !!field <= value[2])) %>%
select(!!id_q)
}
}
return(unique(data %>% pull(!!id_q)))
}
#' @example
#' For use within an R script, but can be extended to other cases
#' Adapt for Shiny by wrapping `final_rows` in a reactive expression
#' Use iris dataset, creating column `id` from rownames
df <- iris %>%
mutate(row_id =
rownames(iris)
)
#' create three filters
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
filter_2 <- dataframeFilter(data = df, id = row_id, field = Sepal.Length, value = c(6))
filter_3 <- dataframeFilter(data = df, id = row_id, field = Petal.Length, value = c(4,6))
filter_1
filter_3
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
filter_2 <- dataframeFilter(data = df, id = row_id, field = Sepal.Length, value = c(6))
filter_3 <- dataframeFilter(data = df, id = row_id, field = Petal.Length, value = c(5.5, 6.5))
#' compose filters
final_rows <- filter_1 %>%
intersect(filter_2) %>%
intersect(filter_3)
#' show resulting filtered dataframe
df %>% filter(row_id %in% final_rows)
final_rows
filter_1 %>%
intersect(filter_2)
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
filter_2 <- dataframeFilter(data = df, id = row_id, field = Sepal.Length, value = c(6))
filter_1
filter_2
df
filter_1 <- dataframeFilter(data = df, id = row_id, field = Species, value = c("setosa"))
filter_2 <- dataframeFilter(data = df, id = row_id, field = Sepal.Length, value = c(4))
filter_3 <- dataframeFilter(data = df, id = row_id, field = Petal.Length, value = c(1.5, 1.9))
final_rows <- filter_1 %>%
intersect(filter_2) %>%
intersect(filter_3)
final_rows
df %>% filter(row_id %in% final_rows)
